import bevy::{Transform, EulerXYZ};
import "./ham.fab" as HamFab;

in nested: Fabricable?;
in size: f32 = 1.0;

out ham: Entity = Spawn;

local rotation: Quat = EulerXYZ(0, 90, 0);
local baz: Entity = Spawn;

local bar: f32 = Expression {
    expression: "a + b * c / 4",
    parameters: {
        a: 1,
        b: 2,
        c: 3,
    },
};

baz <- Parent(ham);
ham <- Parent(root);

local var1: Vec3 = (1, 1, 1);

ham <- Transform {
    translation: var1,
};

ham <- HamFab {
    // ...
};

ham <- nested {
    // ...
};

---
// Ignore me
entity ham component Transform {
};

component on ham Transform {
    translation: (1, 0, 0),
    rotation: rotation;
};

component on ham nested {
    param1: true,
    param2: false,
};


